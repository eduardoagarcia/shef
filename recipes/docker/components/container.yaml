components:
  - id: "docker_container_list"
    description: "Gets all Docker containers and filter results, if desired"
    inputs:
      - id: "list_filter"
        description: "Filter the container results. Must be a string list: '[container-1 container-2 container-3]'"
    operations:
      - id: "docker_list_containers"
        command: docker ps --format "{{ `{{ .Names }}` }}"
        silent: true

      - id: "docker_list_containers"
        transform: '{{ overlap .docker_list_containers .list_filter }}'
        condition: .list_filter != "false" && .list_filter != "[]"
        silent: true

  - id: "docker_container_select"
    description: "Gets all Docker containers and prompts the user to select one"
    inputs:
      - id: "select_filter"
    operations:
      - uses: "docker_container_list"
        id: "containers"
        with:
          list_filter: "{{ .select_filter }}"
        silent: true

      - id: "docker_selected_container"
        command: echo "{{ .docker_container }}"
        silent: true
        prompts:
          - id: "docker_container"
            type: "select"
            message: "Select a container"
            source_operation: "containers"

  - id: "docker_container_multiselect"
    description: "Gets all Docker containers and prompts the user to select one or more containers"
    inputs:
      - id: "multiselect_filter"
    operations:
      - uses: "docker_container_list"
        id: "containers"
        with:
          list_filter: "{{ .multiselect_filter }}"
        silent: true

      - id: "docker_multiselect_containers"
        command: echo {{ .docker_multiselect_containers }}
        silent: true
        prompts:
          - id: "docker_multiselect_containers"
            type: "multiselect"
            message: "Select one or more containers"
            source_operation: "containers"

  - id: "which_docker_container_shell"
    description: "Determines which shell a container uses"
    inputs:
      - id: "docker_shell_container"
    operations:
      - id: "docker_shell"
        command: |
          if docker exec {{ .docker_shell_container }} which bash >/dev/null 2>&1; then
            echo "bash"
          elif docker exec {{ .docker_shell_container }} which zsh >/dev/null 2>&1; then
            echo "zsh"
          elif docker exec {{ .docker_shell_container }} which dash >/dev/null 2>&1; then
            echo "dash"
          elif docker exec {{ .docker_shell_container }} which ksh >/dev/null 2>&1; then
            echo "ksh"
          elif docker exec {{ .docker_shell_container }} which tcsh >/dev/null 2>&1; then
            echo "tcsh"
          elif docker exec {{ .docker_shell_container }} which fish >/dev/null 2>&1; then
            echo "fish"
          elif docker exec {{ .docker_shell_container }} which ash >/dev/null 2>&1; then
            echo "ash"
          elif docker exec {{ .docker_shell_container }} which sh >/dev/null 2>&1; then
            echo "sh"
          else
            exit 1
          fi
        on_failure: "handle_shell_error"

      - id: "handle_shell_error"
        command: echo {{ color "red" "No common shell found in container." }}
        exit: true
