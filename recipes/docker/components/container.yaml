components:
  - id: "docker.container.list"
    inputs:
      - id: "filter"
        description: "Filter the container results. Must be a string list: '[container-1 container-2 container-3]'"
    operations:
      - id: "docker_list_containers"
        command: docker ps --format "{{ `{{ .Names }}` }}"
        silent: true

      - id: "docker_list_containers"
        transform: '{{ overlap .docker_list_containers .filter }}'
        condition: .filter != "false" && .filter != "[]" && .filter != ""
        silent: true
        cleanup:
          - "filter"

  - id: "docker.container.select"
    inputs:
      - id: "filter"
    operations:
      - uses: "docker.container.list"
        id: "containers"
        with:
          filter: "{{ .filter }}"
        silent: true

      - command: 'echo "containers: {{ .containers }}"'

      - id: "docker_selected_container"
        command: echo "{{ .docker_container }}"
        silent: true
        prompts:
          - id: "docker_container"
            type: "select"
            message: "Select a container"
            source_operation: "containers"

  - id: "docker.container.multiselect"
    inputs:
      - id: "filter"
    operations:
      - uses: "docker.container.list"
        id: "containers"
        with:
          filter: "{{ .filter }}"
        silent: true

      - id: "docker_multiselect_containers"
        command: echo {{ .docker_multiselect_containers }}
        silent: true
        prompts:
          - id: "docker_multiselect_containers"
            type: "multiselect"
            message: "Select one or more containers"
            source_operation: "containers"

  - id: "docker.which.shell"
    inputs:
      - id: "container"
    operations:
      - command: |
          if docker exec {{ .container }} which bash >/dev/null 2>&1; then
            echo "bash"
          elif docker exec {{ .container }} which zsh >/dev/null 2>&1; then
            echo "zsh"
          elif docker exec {{ .container }} which dash >/dev/null 2>&1; then
            echo "dash"
          elif docker exec {{ .container }} which ksh >/dev/null 2>&1; then
            echo "ksh"
          elif docker exec {{ .container }} which tcsh >/dev/null 2>&1; then
            echo "tcsh"
          elif docker exec {{ .container }} which fish >/dev/null 2>&1; then
            echo "fish"
          elif docker exec {{ .container }} which ash >/dev/null 2>&1; then
            echo "ash"
          elif docker exec {{ .container }} which sh >/dev/null 2>&1; then
            echo "sh"
          else
            exit 1
          fi
        on_failure: "handle_shell_error"
        cleanup:
          - "container"

      - id: "handle_shell_error"
        command: echo {{ color "red" "No common shell found in container." }}
        exit: true
