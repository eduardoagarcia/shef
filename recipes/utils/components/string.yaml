components:
  - id: "string.upper"
    inputs:
      - id: "string"
        required: true
    operations:
      - command: echo {{ .string }} | tr '[:lower:]' '[:upper:]'
        output_format: "trim"
        cleanup:
          - "string"

  - id: "string.lower"
    inputs:
      - id: "string"
        required: true
    operations:
      - command: echo {{ .string }} | tr '[:upper:]' '[:lower:]'
        output_format: "trim"
        cleanup:
          - "string"

  - id: "string.camel"
    inputs:
      - id: "string"
        required: true
    operations:
      - command: echo "{{ .string }}" | awk 'BEGIN{RS="[^a-zA-Z0-9]+"} {if (NR==1) {printf tolower($0)} else {printf toupper(substr($0,1,1)) tolower(substr($0,2))}}'
        output_format: "trim"
        cleanup:
          - "string"

  - id: "string.pascal"
    inputs:
      - id: "string"
        required: true
    operations:
      - command: echo "{{ .string }}" | awk 'BEGIN{RS="[^a-zA-Z0-9]+"} {printf toupper(substr($0,1,1)) tolower(substr($0,2))}'
        output_format: "trim"
        cleanup:
          - "string"

  - id: "string.snake"
    inputs:
      - id: "string"
        required: true
    operations:
      - command: echo "{{ .string }}" | tr '[:upper:]' '[:lower:]' | sed -e 's/[^[:alnum:]]/_/g' | sed -e 's/__*/_/g' | sed -e 's/^_//' -e 's/_$//'
        output_format: "trim"
        cleanup:
          - "string"

  - id: "string.kebab"
    inputs:
      - id: "string"
        required: true
    operations:
      - command: echo "{{ .string }}" | tr '[:upper:]' '[:lower:]' | sed -e 's/[^[:alnum:]]/-/g' | sed -e 's/--*/-/g' | sed -e 's/^-//' -e 's/-$//'
        output_format: "trim"
        cleanup:
          - "string"

  - id: "string.slug"
    inputs:
      - id: "string"
        required: true
    operations:
      - uses: "string.kebab"
        with:
          string: '{{ .string }}'

      - cleanup:
          - "string"

  - id: "string.title"
    inputs:
      - id: "string"
        required: true
    operations:
      - command: echo "{{ .string }}" | awk '{for(i=1;i<=NF;i++) $i=toupper(substr($i,1,1)) tolower(substr($i,2));}1'
        output_format: "trim"
        cleanup:
          - "string"

  - id: "string.reverse"
    inputs:
      - id: "string"
        required: true
    operations:
      - command: echo "{{ .string }}" | rev
        output_format: "trim"
        cleanup:
          - "string"

  - id: "string.count.words"
    inputs:
      - id: "string"
        required: true
    operations:
      - command: printf "%s" "{{ .string }}" | wc -w
        output_format: "trim"
        cleanup:
          - "string"

  - id: "string.count.chars"
    inputs:
      - id: "string"
        required: true
    operations:
      - command: printf "%s" "{{ .string }}" | wc -c
        output_format: "trim"
        cleanup:
          - "string"
