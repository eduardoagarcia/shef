components:
  - id: "password.strength.rating"
    inputs:
      - id: "password"
        required: true
    operations:
      - uses: "password.strength"
        id: "json_results"
        with:
          password: "{{ .password }}"
        silent: true

      - uses: "json.jq"
        id: "rating"
        with:
          json: "{{ .json_results }}"
          filter: ".rating"
        silent: true

      - transform: '{{ replace .rating "\"" "" }}'

  - id: "password.strength.score"
    inputs:
      - id: "password"
        required: true
    operations:
      - uses: "password.strength"
        id: "json_results"
        with:
          password: "{{ .password }}"
        silent: true

      - uses: "json.jq"
        id: "score"
        with:
          json: "{{ .json_results }}"
          filter: ".score"
        silent: true

      - transform: '{{ roundTo .score 2 }}'

  - id: "password.strength"
    inputs:
      - id: "password"
        required: true
    operations:
      - uses: "python"
        with:
          code: |
            import json
            import math
            import re
            from collections import Counter

            def check_password_strength(password):
              score = 0
              length = len(password)

              if length == 0:
                return json.dumps({"rating": "invalid", "score": 0})

              score += min(30, length * 2)

              score += sum([
                any(c.islower() for c in password) * 10,
                any(c.isupper() for c in password) * 10,
                any(c.isdigit() for c in password) * 10,
                any(not c.isalnum() for c in password) * 10
              ])

              char_counts = Counter(password)
              entropy = -sum((count/length) * math.log2(count/length) for count in char_counts.values())
              entropy_score = min(30, entropy * 6)
              score += entropy_score

              repeats = re.findall(r'(.+?)\1+', password)
              if repeats:
                score -= min(20, sum(len(r) * 4 for r in repeats))

              sequential_penalty = 0
              for i in range(length - 2):
                if (ord(password[i+1]) - ord(password[i]) == 1 and
                    ord(password[i+2]) - ord(password[i+1]) == 1):
                  sequential_penalty += 3
                elif (ord(password[i+1]) - ord(password[i]) == -1 and
                      ord(password[i+2]) - ord(password[i+1]) == -1):
                  sequential_penalty += 3
              score -= min(20, sequential_penalty)

              score = max(0, min(100, score))

              if score < 40: rating = "weak"
              elif score < 60: rating = "moderate"
              elif score < 80: rating = "strong"
              else: rating = "very strong"

              return json.dumps({"rating": rating, "score": score})

            # Check password strength
            print(check_password_strength("{{ .password }}"))
