components:
#
#  - id: "analyze_password_strength"
#    inputs:
#      - id: "password"
#    operations:
#      - command: |
#          python3 -c "
#          import sys, math
#
#          password = '{{ .password }}'
#          score = 0
#          feedback = []
#
#          # Length check
#          if len(password) < 8:
#              feedback.append('Too short (less than 8 characters)')
#          elif len(password) >= 12:
#              score += 20
#              feedback.append('Good length')
#          else:
#              score += 10
#
#          # Character variety
#          has_lower = any(c.islower() for c in password)
#          has_upper = any(c.isupper() for c in password)
#          has_digit = any(c.isdigit() for c in password)
#          has_special = any(not c.isalnum() for c in password)
#
#          variety_count = sum([has_lower, has_upper, has_digit, has_special])
#          score += variety_count * 10
#
#          if not has_lower:
#              feedback.append('No lowercase letters')
#          if not has_upper:
#              feedback.append('No uppercase letters')
#          if not has_digit:
#              feedback.append('No digits')
#          if not has_special:
#              feedback.append('No special characters')
#
#          # Entropy calculation (simplified)
#          char_set_size = 0
#          if has_lower: char_set_size += 26
#          if has_upper: char_set_size += 26
#          if has_digit: char_set_size += 10
#          if has_special: char_set_size += 33  # Approximation
#
#          if char_set_size > 0:
#              entropy = math.log2(char_set_size ** len(password))
#              score += min(int(entropy / 4), 40)  # Cap at 40 points
#              feedback.append(f'Entropy: {entropy:.2f} bits')
#
#          # Final scoring
#          if score >= 70:
#              strength = 'Strong'
#          elif score >= 40:
#              strength = 'Medium'
#          else:
#              strength = 'Weak'
#
#          print(f'Password Strength: {strength} ({score}/100)')
#          print('\\nFeedback:')
#          for point in feedback:
#              print(f'- {point}')
#          "
