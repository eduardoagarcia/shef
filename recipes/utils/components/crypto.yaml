components:
  - id: "crypto.md5"
    inputs:
      - id: "data"
    operations:
      - command: printf "{{ .data }}" | md5
        output_format: "trim"
        unset:
          - "data"

  - id: "crypto.sha1"
    inputs:
      - id: "data"
    operations:
      - command: printf "{{ .data }}" | shasum -a 1 | cut -d ' ' -f 1
        output_format: "trim"
        unset:
          - "data"

  - id: "crypto.sha256"
    inputs:
      - id: "data"
    operations:
      - command: printf "{{ .data }}" | shasum -a 256 | cut -d ' ' -f 1
        output_format: "trim"
        unset:
          - "data"

  - id: "crypto.sha512"
    inputs:
      - id: "data"
    operations:
      - command: printf "{{ .data }}" | shasum -a 512 | cut -d ' ' -f 1
        output_format: "trim"
        unset:
          - "data"

  - id: "crypto.rot13"
    inputs:
      - id: "data"
    operations:
      - command: printf "{{ .data }}" | tr 'A-Za-z' 'N-ZA-Mn-za-m'
        output_format: "trim"
        unset:
          - "data"

  - id: "crypto.aes.encrypt"
    inputs:
      - id: "data"
        required: true
      - id: "passphrase"
        required: true
      - id: "iterations"
        default: 10000
    operations:
      - command: |
          set +H
          printf "{{ .data }}" | openssl enc -aes-256-cbc -a -salt -pbkdf2 -iter {{ .iterations }} -pass pass:"{{ .passphrase }}"
          set -H
        output_format: "trim"
        unset:
          - "data"
          - "passphrase"
          - "iterations"

  - id: "crypto.aes.decrypt"
    inputs:
      - id: "data"
        required: true
      - id: "passphrase"
        required: true
      - id: "iterations"
        default: 10000
    operations:
      - command: echo "{{ .data }}" | openssl enc -aes-256-cbc -a -d -salt -pbkdf2 -iter {{ .iterations }} -pass pass:"{{ .passphrase }}"
        output_format: "trim"
        unset:
          - "data"
          - "passphrase"
          - "iterations"

#
#  # File checksums
#  - id: "file_checksum"
#    inputs:
#      - id: "file_path"
#      - id: "algorithm"
#        default: "md5"
#    operations:
#      - command: |
#          if [ "{{ .algorithm }}" = "md5" ]; then
#            md5 "{{ .file_path }}" | cut -d '=' -f 2 | tr -d ' '
#          elif [ "{{ .algorithm }}" = "sha1" ]; then
#            shasum -a 1 "{{ .file_path }}" | cut -d ' ' -f 1
#          elif [ "{{ .algorithm }}" = "sha256" ]; then
#            shasum -a 256 "{{ .file_path }}" | cut -d ' ' -f 1
#          elif [ "{{ .algorithm }}" = "sha512" ]; then
#            shasum -a 512 "{{ .file_path }}" | cut -d ' ' -f 1
#          else
#            echo "Unsupported algorithm: {{ .algorithm }}"
#            exit 1
#          fi
#
#  - id: "caesar_cipher"
#    inputs:
#      - id: "data"
#      - id: "shift"
#        default: "13"
#    operations:
#      - command: |
#          printf "{{ .data }}" | python3 -c "
#          import sys
#          data = sys.stdin.read()
#          shift = int('{{ .shift }}') % 26
#          result = ''
#          for char in data:
#            if char.isalpha():
#              ascii_offset = ord('A') if char.isupper() else ord('a')
#              result += chr((ord(char) - ascii_offset + shift) % 26 + ascii_offset)
#            else:
#              result += char
#          print(result, end='')
#          "
#
#  - id: "vigenere_encode"
#    inputs:
#      - id: "data"
#      - id: "key"
#    operations:
#      - command: |
#          printf "{{ .data }}" | python3 -c "
#          import sys
#          data = sys.stdin.read()
#          key = '{{ .key }}'.upper()
#          result = ''
#          key_index = 0
#          for char in data:
#            if char.isalpha():
#              ascii_offset = ord('A') if char.isupper() else ord('a')
#              key_char = key[key_index % len(key)]
#              shift = ord(key_char) - ord('A')
#              result += chr((ord(char) - ascii_offset + shift) % 26 + ascii_offset)
#              key_index += 1
#            else:
#              result += char
#          print(result, end='')
#          "
#
#  - id: "vigenere_decode"
#    inputs:
#      - id: "data"
#      - id: "key"
#    operations:
#      - command: |
#          printf "{{ .data }}" | python3 -c "
#          import sys
#          data = sys.stdin.read()
#          key = '{{ .key }}'.upper()
#          result = ''
#          key_index = 0
#          for char in data:
#            if char.isalpha():
#              ascii_offset = ord('A') if char.isupper() else ord('a')
#              key_char = key[key_index % len(key)]
#              shift = ord(key_char) - ord('A')
#              result += chr((ord(char) - ascii_offset - shift) % 26 + ascii_offset)
#              key_index += 1
#            else:
#              result += char
#          print(result, end='')
#          "
#
#  - id: "analyze_password_strength"
#    inputs:
#      - id: "password"
#    operations:
#      - command: |
#          python3 -c "
#          import sys, math
#
#          password = '{{ .password }}'
#          score = 0
#          feedback = []
#
#          # Length check
#          if len(password) < 8:
#              feedback.append('Too short (less than 8 characters)')
#          elif len(password) >= 12:
#              score += 20
#              feedback.append('Good length')
#          else:
#              score += 10
#
#          # Character variety
#          has_lower = any(c.islower() for c in password)
#          has_upper = any(c.isupper() for c in password)
#          has_digit = any(c.isdigit() for c in password)
#          has_special = any(not c.isalnum() for c in password)
#
#          variety_count = sum([has_lower, has_upper, has_digit, has_special])
#          score += variety_count * 10
#
#          if not has_lower:
#              feedback.append('No lowercase letters')
#          if not has_upper:
#              feedback.append('No uppercase letters')
#          if not has_digit:
#              feedback.append('No digits')
#          if not has_special:
#              feedback.append('No special characters')
#
#          # Entropy calculation (simplified)
#          char_set_size = 0
#          if has_lower: char_set_size += 26
#          if has_upper: char_set_size += 26
#          if has_digit: char_set_size += 10
#          if has_special: char_set_size += 33  # Approximation
#
#          if char_set_size > 0:
#              entropy = math.log2(char_set_size ** len(password))
#              score += min(int(entropy / 4), 40)  # Cap at 40 points
#              feedback.append(f'Entropy: {entropy:.2f} bits')
#
#          # Final scoring
#          if score >= 70:
#              strength = 'Strong'
#          elif score >= 40:
#              strength = 'Medium'
#          else:
#              strength = 'Weak'
#
#          print(f'Password Strength: {strength} ({score}/100)')
#          print('\\nFeedback:')
#          for point in feedback:
#              print(f'- {point}')
#          "
