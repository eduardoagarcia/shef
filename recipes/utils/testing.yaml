recipes:
  - name: "unset"
    description: "Test unset"
    category: "utils"
    operations:
      - id: "name_var"
        command: echo "hello world"
      - id: "address_var"
        command: echo "9400 tea rose trail"

      - command: echo "{{ .name_var }}"
      - command: echo "{{ .address_var }}"

      - unset:
          - "name_var"
          - "address_var"

      - command: echo "{{ .name_var }}"
      - command: echo "{{ .address_var }}"

  - name: "test"
    description: "Test the utils"
    category: "utils"
    operations:
      - uses: "generate.uuid4"
        id: "uuid"

      - uses: "string.lower"
        id: "uuid_lower"
        with:
          string: "{{ .uuid }}"

      - uses: "string.upper"
        with:
          string: "{{ .uuid_lower }}"

      - uses: "generate.uuid5"
        with:
          namespace: "dns"  # dns url oid x500
          name: "{{ .uuid_lower }}"

      - uses: "string.camel"
        with:
          string: "this is a test"

      - uses: "string.pascal"
        with:
          string: "this is a test"

      - uses: "string.snake"
        with:
          string: "a SNAKE case to TEST ---"

      - uses: "string.kebab"
        with:
          string: "a KEBAB case to TEST ---__ 7653#$%@#$%^5@#4$%24@#%@#$"

      - uses: "string.slug"
        with:
          string: "This is another test for ---___#%#@$@# 99 slugs!"

      - uses: "string.title"
        with:
          string: "this is a test"

      - uses: "string.reverse"
        with:
          string: "this is a test"

      - uses: "string.count.words"
        with:
          string: "this is a test"

      - uses: "string.count.chars"
        with:
          string: "this is a test"

      - uses: "data.base64.encode"
        id: "base64_encoded"
        with:
          data: "{{ .uuid_lower }}"

      - uses: "data.base64.decode"
        with:
          data: "{{ .base64_encoded }}"

      - uses: "data.hex.encode"
        id: "hex_encoded"
        with:
          data: "{{ .uuid_lower }}"

      - uses: "data.hex.decode"
        with:
          data: "{{ .hex_encoded }}"

      - uses: "data.binary.encode"
        id: "binary_encoded"
        with:
          data: "{{ .uuid_lower }}"

      - uses: "data.binary.decode"
        with:
          data: "{{ .binary_encoded }}"

      - uses: "generate.password"
        id: "encrypt_password"

      - uses: "generate.alphanumeric"

      - uses: "generate.number"

      - uses: "generate.timestamp"

      - uses: "generate.date"

      - uses: "generate.time"

      - uses: "generate.hex_color"

      - uses: "generate.mac"

      - uses: "generate.ipv4"

      - uses: "generate.ipv6"

      - uses: "crypto.md5"
        with:
          data: "{{ .uuid_lower }}"

      - uses: "crypto.sha1"
        with:
          data: "{{ .uuid_lower }}"

      - uses: "crypto.sha256"
        with:
          data: "{{ .uuid_lower }}"

      - uses: "crypto.sha512"
        with:
          data: "{{ .uuid_lower }}"

      - uses: "crypto.rot13"
        with:
          data: "{{ .uuid_lower }}"

      - uses: "crypto.aes.encrypt"
        id: "aes_encrypted_data"
        with:
          data: "{{ .uuid_lower }}"
          passphrase: "{{ .encrypt_password }}"

      - uses: "crypto.aes.decrypt"
        id: "aes_encrypted_data"
        with:
          data: "{{ .aes_encrypted_data }}"
          passphrase: "{{ .encrypt_password }}"

      - uses: "file.write"
        with:
          file: "/Users/eduardoagarcia/Desktop/{{ .uuid_lower }}.txt"
          contents: |
            This is line 1
            This is line 2
            This is line 3
            This is line 4
            This is line 5

            String with special chars: $HOME * & |

            "hello world"
            'more quotes'
            '"nested quotes 1"'
            "'nested quotes 2'"
            '"broken quotes 1'"

            2394q23rij3t4;fioaf9q2304u@#%Q# $ TQAGDFGADF
            $5.50

            updated

      - uses: "file.read"
        id: "opened_file"
        with:
          file: "/Users/eduardoagarcia/Desktop/{{ .uuid_lower }}.txt"

      - uses: "file.read"
        id: "opened_file_break"
        with:
          file: "/Users/eduardoagarcia/Desktop/{{ .uuid_lower }}_broken.txt"
        on_failure: ":" # noop

      - command: 'echo "broken file output: {{ .opened_file_break }}"'

      - uses: "file.exists"
        with:
          file: "/Users/eduardoagarcia/Desktop/{{ .uuid_lower }}_broken.txt"

      - uses: "file.write"
        with:
          file: "/Users/eduardoagarcia/Desktop/{{ .uuid_lower }}_write_test.txt"
          contents: '{{ .opened_file }}'

      - uses: "file.filename"
        with:
          file: "/Users/eduardoagarcia/Desktop/{{ .uuid_lower }}.txt"

      - uses: "file.extension"
        with:
          file: "/Users/eduardoagarcia/Desktop/{{ .uuid_lower }}.txt"

      - uses: "file.path"
        with:
          file: "/Users/eduardoagarcia/Desktop/{{ .uuid_lower }}.txt"

      - uses: "file.backup"
        id: "backup_filename"
        with:
          file: "/Users/eduardoagarcia/Desktop/{{ .uuid_lower }}.txt"

      - uses: "dir.create"
        with:
          dir: "/Users/eduardoagarcia/Desktop/boop/boop2"

      - uses: "file.write"
        with:
          file: "/Users/eduardoagarcia/Desktop/boop/boop_test.txt"
          contents: 'this is a boop test!'

      - uses: "dir.sync"
        with:
          src: "/Users/eduardoagarcia/Desktop/boop"
          dst: "/Users/eduardoagarcia/Desktop/boop-synced"

      - uses: "user.home"

      - uses: "file.upper.name"
        with:
          file: "/Users/eduardoagarcia/Desktop/{{ .uuid_lower }}.txt"

      - uses: "file.upper.extension"
        with:
          file: "/Users/eduardoagarcia/Desktop/{{ .uuid_lower }}.txt"

      - uses: "file.create"
        with:
          file: "/Users/eduardoagarcia/Desktop/UPPER_NAME.UPPER_EXTENSION"

      - uses: "file.lower.name"
        with:
          file: "/Users/eduardoagarcia/Desktop/UPPER_NAME.UPPER_EXTENSION"

      - uses: "file.lower.extension"
        with:
          file: "/Users/eduardoagarcia/Desktop/UPPER_NAME.UPPER_EXTENSION"

      - uses: "file.upper"
        with:
          file: "/Users/eduardoagarcia/Desktop/{{ .uuid_lower }}.txt"

      - uses: "file.lower"
        with:
          file: "/Users/eduardoagarcia/Desktop/UPPER_NAME.UPPER_EXTENSION"

      - uses: "dir.pwd"

      - uses: "dir.list"

      - uses: "dir.list"
        with:
          dir: "/Users/eduardoagarcia/Desktop"

      - uses: "dir.list"
        with:
          dir: "/Users/eduardoagarcia/Desktop/UPPER_NAME.UPPER_EXTENSION"
        on_failure: ":"

      - command: echo "src {{ .src }}"
      - command: echo "dst {{ .dst }}"
      - command: echo "dir {{ .dir }}"
      - command: echo "old {{ .old }}"
      - command: echo "new {{ .new }}"

      - prompts:
          - name: Confirmation
            id: confirmation
            type: confirm
            message: "Do you want to proceed with cleanup?"
            default: "true"

      - uses: "file.delete"
        with:
          file: "/Users/eduardoagarcia/Desktop/{{ .uuid_lower }}.txt"

      - uses: "file.delete"
        with:
          file: "/Users/eduardoagarcia/Desktop/{{ .uuid_lower }}_write_test.txt"

      - uses: "file.delete"
        with:
          file: "{{ .backup_filename }}"

      - uses: "dir.delete"
        with:
          dir: "/Users/eduardoagarcia/Desktop/boop"
          force: true

      - uses: "dir.delete"
        with:
          dir: "/Users/eduardoagarcia/Desktop/boop-synced"
          force: true

      - uses: "file.delete"
        with:
          file: "/Users/eduardoagarcia/Desktop/UPPER_NAME.UPPER_EXTENSION"




































#  # Basic encoding/decoding
#  - name: "to_base64"
#    description: "Base64 encode a string"
#    category: "data"
#    operations:
#      - uses: "to_base64"
#        with:
#          data: "{{ .input }}"
#        id: "data"
#
#  - name: "from_base64"
#    description: "Base64 decode a string"
#    category: "data"
#    operations:
#      - uses: "from_base64"
#        with:
#          data: "{{ .input }}"
#        id: "data"
#
#  - name: "to_hex"
#    description: "Convert text to hexadecimal"
#    category: "data"
#    operations:
#      - uses: "to_hex"
#        with:
#          data: "{{ .input }}"
#        id: "data"
#
#  - name: "from_hex"
#    description: "Convert hexadecimal to text"
#    category: "data"
#    operations:
#      - uses: "from_hex"
#        with:
#          data: "{{ .input }}"
#        id: "data"
#
#  - name: "to_binary"
#    description: "Convert text to binary"
#    category: "data"
#    operations:
#      - uses: "to_binary"
#        with:
#          data: "{{ .input }}"
#        id: "data"
#
#  - name: "from_binary"
#    description: "Convert binary to text"
#    category: "data"
#    operations:
#      - uses: "from_binary"
#        with:
#          data: "{{ .input }}"
#        id: "data"
#
#  - name: "to_url"
#    description: "URL encode text"
#    category: "data"
#    operations:
#      - uses: "to_url"
#        with:
#          data: "{{ .input }}"
#        id: "data"
#
#  - name: "from_url"
#    description: "URL decode text"
#    category: "data"
#    operations:
#      - uses: "from_url"
#        with:
#          data: "{{ .input }}"
#        id: "data"
#
#  # Data analysis
#  - name: "frequency_analysis"
#    description: "Analyze character frequency in text"
#    category: "data"
#    operations:
#      - uses: "frequency_analysis"
#        with:
#          data: "{{ .input }}"
#        id: "analysis"
#
#  - name: "entropy"
#    description: "Calculate entropy of input data"
#    category: "data"
#    operations:
#      - uses: "entropy"
#        with:
#          data: "{{ .input }}"
#        id: "entropy"
#
#  # Text operations
#  - name: "find_replace"
#    description: "Find and replace text"
#    category: "data"
#    operations:
#      - name: "Find and Replace"
#        prompts:
#          - name: "Find pattern"
#            id: "find"
#            type: "input"
#            message: "Enter text to find:"
#          - name: "Replace with"
#            id: "replace"
#            type: "input"
#            message: "Enter replacement text:"
#        uses: "find_replace"
#        with:
#          data: "{{ .input }}"
#          find: "{{ .find }}"
#          replace: "{{ .replace }}"
#        id: "result"
#
#  - name: "split"
#    description: "Split text by delimiter"
#    category: "data"
#    operations:
#      - name: "Split Text"
#        prompts:
#          - name: "Delimiter"
#            id: "delimiter"
#            type: "input"
#            message: "Enter delimiter character:"
#            default: ","
#        uses: "split"
#        with:
#          data: "{{ .input }}"
#          delimiter: "{{ .delimiter }}"
#        id: "result"
#
#  - name: "regex_extract"
#    description: "Extract text matching a regex pattern"
#    category: "data"
#    operations:
#      - name: "Regular Expression Extract"
#        prompts:
#          - name: "Pattern"
#            id: "pattern"
#            type: "input"
#            message: "Enter regex pattern:"
#        uses: "regex_extract"
#        with:
#          data: "{{ .input }}"
#          pattern: "{{ .pattern }}"
#        id: "result"
#
#  # Format converters
#  - name: "to_unix_timestamps"
#    description: "Convert dates to UNIX timestamps"
#    category: "data"
#    operations:
#      - uses: "to_unix_timestamps"
#        with:
#          data: "{{ .input }}"
#        id: "timestamps"
#
#  - name: "from_unix_timestamp"
#    description: "Convert UNIX timestamp to human-readable date"
#    category: "data"
#    operations:
#      - name: "Convert Timestamp"
#        prompts:
#          - name: "Timestamp"
#            id: "timestamp"
#            type: "input"
#            message: "Enter UNIX timestamp:"
#            default: "{{ .input }}"
#        uses: "from_unix_timestamp"
#        with:
#          timestamp: "{{ .timestamp }}"
#        id: "date"
#
#  - name: "csv_to_json"
#    description: "Convert CSV to JSON"
#    category: "data"
#    operations:
#      - name: "CSV to JSON"
#        prompts:
#          - name: "Has Header"
#            id: "header"
#            type: "confirm"
#            message: "Does the CSV have a header row?"
#            default: true
#        uses: "csv_to_json"
#        with:
#          data: "{{ .input }}"
#          header: "{{ if .header }}true{{ else }}false{{ end }}"
#        id: "json"
#
#  - name: "json_to_csv"
#    description: "Convert JSON to CSV"
#    category: "data"
#    operations:
#      - uses: "json_to_csv"
#        with:
#          data: "{{ .input }}"
#        id: "csv"
#
#  # Data sorting and filtering
#  - name: "sort_data"
#    description: "Sort text lines"
#    category: "data"
#    operations:
#      - name: "Sort Data"
#        prompts:
#          - name: "Sort numerically"
#            id: "numeric"
#            type: "confirm"
#            message: "Sort numerically?"
#            default: false
#          - name: "Sort in reverse"
#            id: "reverse"
#            type: "confirm"
#            message: "Sort in reverse order?"
#            default: false
#        uses: "sort_data"
#        with:
#          data: "{{ .input }}"
#          numeric: "{{ if .numeric }}true{{ else }}false{{ end }}"
#          reverse: "{{ if .reverse }}true{{ else }}false{{ end }}"
#        id: "sorted"
#
#  - name: "unique_lines"
#    description: "Find unique lines in text"
#    category: "data"
#    operations:
#      - name: "Find Unique Lines"
#        prompts:
#          - name: "Show counts"
#            id: "count"
#            type: "confirm"
#            message: "Show occurrence counts?"
#            default: false
#        uses: "unique_lines"
#        with:
#          data: "{{ .input }}"
#          count: "{{ if .count }}true{{ else }}false{{ end }}"
#        id: "uniques"
#
#  - name: "extract_email"
#    description: "Extract email addresses from text"
#    category: "data"
#    operations:
#      - uses: "extract_email"
#        with:
#          data: "{{ .input }}"
#        id: "emails"
#
#  - name: "extract_ip"
#    description: "Extract IPv4 addresses from text"
#    category: "data"
#    operations:
#      - uses: "extract_ip"
#        with:
#          data: "{{ .input }}"
#        id: "ips"
