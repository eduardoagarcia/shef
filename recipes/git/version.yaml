recipes:
  - name: "version"
    description: "Create and push version tags to Git"
    category: "git"
    help: |
      This recipe helps create and push version tags to Git.

      The recipe will:
        1. Check the current Git branch and fetch all tags
        2. Find the latest version tag (follows v0.0.0 format)
        3. Show the current version if it exists
        4. Let you choose the type of version increment:
           - major: Increment first number (v1.0.0 → v2.0.0)
           - minor: Increment second number (v1.0.0 → v1.1.0)
           - patch: Increment third number (v1.0.0 → v1.0.1)
        5. Create a new version tag with an optional message
        6. Optionally push the tag to the remote repository

      Requirements:
        - Git must be installed
        - You must be in a git repository
        - You must have permission to create and push tags

      This recipe follows semantic versioning principles (MAJOR.MINOR.PATCH).
    operations:
      - name: "Check Current Branch"
        id: "branch"
        command: |
          git rev-parse --abbrev-ref HEAD
          git fetch --tags
          git fetch --all
        silent: true

      - name: "Find Latest Tag"
        id: "latest_tag"
        command: git tag -l "v*.*.*" --sort=-v:refname | head -n1 || echo ""
        silent: true
        transform: |
          {{ $tag := .output | trim }}
          {{ if eq $tag "" }}
            {{ "NO_EXISTING_TAGS" }}
          {{ else }}
            {{ $tag }}
          {{ end }}

      - name: "Existing Tags Message"
        id: "existing_tags_message"
        command: echo {{ color "magenta" "The current version:" }} {{ style "bold" (color "yellow" .latest_tag) }}
        condition: .latest_tag != "NO_EXISTING_TAGS"

      - name: "No Existing Tags Message"
        id: "no_existing_tags_message"
        command: echo {{ color "yellow" "No existing version tags found." }}
        condition: .latest_tag == "NO_EXISTING_TAGS"

      - name: "Choose Version"
        prompts:
          - name: "Version"
            id: "version"
            type: "select"
            message: "{{ if eq .latest_tag `NO_EXISTING_TAGS` }}Select the initial version{{ else }}Choose version{{ end }}"
            options:
              - "major"
              - "minor"
              - "patch"
            default: "{{ if eq .latest_tag `NO_EXISTING_TAGS` }}minor{{ else }}patch{{ end }}"

      - name: "Calculate New Version"
        id: "new_version"
        silent: true
        command: |
          if [[ "{{ .latest_tag }}" == "NO_EXISTING_TAGS" ]]; then
            # First version case
            if [[ "{{ .version }}" == "custom" ]]; then
              printf "{{ .custom_version }}"
            elif [[ "{{ .version }}" == "major" ]]; then
              printf "v1.0.0"
            elif [[ "{{ .version }}" == "minor" ]]; then
              printf "v0.1.0"
            else
              printf "v0.0.1"
            fi
          else
            # Existing version case
            TAG="{{ .latest_tag }}"
            # Remove the 'v' prefix
            VERSION="${TAG#v}"
            # Split into parts
            IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
          
            if [[ "{{ .version }}" == "custom" ]]; then
              printf "{{ .custom_version }}"
            elif [[ "{{ .version }}" == "major" ]]; then
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              printf "v$MAJOR.$MINOR.$PATCH"
            elif [[ "{{ .version }}" == "minor" ]]; then
              MINOR=$((MINOR + 1))
              PATCH=0
              printf "v$MAJOR.$MINOR.$PATCH"
            else
              # Patch is the default
              PATCH=$((PATCH + 1))
              printf "v$MAJOR.$MINOR.$PATCH"
            fi
          fi

      - name: "Display New Version"
        id: "display_new_version"
        command: echo {{ color "magenta" "The new version:" }} {{ style "bold" (color "yellow" .new_version) }}
        condition: .latest_tag != "NO_EXISTING_TAGS"

      - name: "Display Initial Version"
        id: "display_initial_version"
        command: echo {{ color "magenta" "Initial version:" }} {{ style "bold" (color "yellow" .new_version) }}
        condition: .latest_tag == "NO_EXISTING_TAGS"

      - name: "Prepare Tag"
        id: "tag_prep"
        prompts:
          - name: "Tag Message"
            id: "tag_message"
            type: "input"
            message: "Please provide a release message [optional]"
            default: "{{ if eq .latest_tag `NO_EXISTING_TAGS` }}Initial release {{ .new_version }}{{ else }}Release {{ .new_version }}{{ end }}"
          - name: "Confirm Create"
            id: "confirm_create"
            type: "confirm"
            message: "Create tag {{ .new_version }} locally?"
            default: "true"

      - name: "Create Tag"
        id: "create_tag"
        command: git tag -a {{ .new_version }} -m "{{ .tag_message }}"
        condition: .confirm_create == "true"

      - name: "Confirm Push"
        id: "confirm_push_op"
        condition: create_tag.success
        prompts:
          - name: "Confirm Push"
            id: "confirm_push"
            type: "confirm"
            message: "Push tag {{ .new_version }} to origin?"
            default: "true"

      - name: "Push Tag Message"
        id: "push_tag_message"
        command: echo {{ color "magenta" (printf "Pushing the new tag %s to origin..." .new_version) }}
        condition: create_tag.success && .confirm_push == "true"

      - name: "Push Tag"
        id: "push_tag"
        command: git push origin {{ .new_version }}
        condition: create_tag.success && .confirm_push == "true"

      - name: "Show Result"
        command: |
          {{ if eq .confirm_push true }}
          echo {{ color "green" "Successfully created and pushed" }} {{ style "bold" (color "yellow" .new_version) }} {{ color "green" "to origin" }}
          {{ else }}
          echo {{ color "green" "Successfully created" }} {{ style "bold" (color "yellow" .new_version) }}
          {{ end }}
        condition: create_tag.success
