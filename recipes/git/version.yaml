recipes:
  - name: "version"
    description: "Create and push Git semantic version tags"
    category: "git"
    operations:
      - name: "Check Current Branch"
        id: "branch"
        command: "git rev-parse --abbrev-ref HEAD"
        silent: true

      - name: "Find Latest Tag"
        id: "latest_tag"
        command: "git tag -l 'v*.*.*' --sort=-v:refname | head -n1 || echo ''"
        silent: true
        transform: |
          {{- $tag := .input | trim -}}
          {{- if eq $tag "" -}}
            {{- "NO_EXISTING_TAGS" -}}
          {{- else -}}
            {{- $tag -}}
          {{- end -}}

      - name: "Display Current Version"
        command: "{{- if eq .latest_tag \"NO_EXISTING_TAGS\" -}}echo 'No existing semantic version tags found. Will create first tag.'{{- else -}}echo 'Current version: {{ .latest_tag }}'{{- end -}}"

      - name: "Choose Version Bump"
        command: "echo 'Selected bump type: {{ .bump_type }}'"
        prompts:
          - name: "bump_type"
            type: "select"
            message: "{{- if eq .latest_tag \"NO_EXISTING_TAGS\" -}}Select initial version type{{- else -}}Version bump type{{- end -}}"
            options:
              - "major"
              - "minor"
              - "patch"
              - "custom"
            default: "{{- if eq .latest_tag \"NO_EXISTING_TAGS\" -}}minor{{- else -}}patch{{- end -}}"

      - name: "Calculate New Version"
        id: "new_version"
        silent: true
        command: |
          if [[ "{{ .latest_tag }}" == "NO_EXISTING_TAGS" ]]; then
            # First version case
            if [[ "{{ .bump_type }}" == "custom" ]]; then
              printf "{{ .custom_version }}"
            elif [[ "{{ .bump_type }}" == "major" ]]; then
              printf "v1.0.0"
            elif [[ "{{ .bump_type }}" == "minor" ]]; then
              printf "v0.1.0"
            else
              printf "v0.0.1"
            fi
          else
            # Existing version case
            TAG="{{ .latest_tag }}"
            # Remove the 'v' prefix
            VERSION="${TAG#v}"
            # Split into parts
            IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
          
            if [[ "{{ .bump_type }}" == "custom" ]]; then
              printf "{{ .custom_version }}"
            elif [[ "{{ .bump_type }}" == "major" ]]; then
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              printf "v$MAJOR.$MINOR.$PATCH"
            elif [[ "{{ .bump_type }}" == "minor" ]]; then
              MINOR=$((MINOR + 1))
              PATCH=0
              printf "v$MAJOR.$MINOR.$PATCH"
            else
              # Patch is the default
              PATCH=$((PATCH + 1))
              printf "v$MAJOR.$MINOR.$PATCH"
            fi
          fi

      - name: "Custom Version Input"
        id: "custom_version_op"
        command: "echo {{ .custom_version }}"
        condition: "bump_type == \"custom\""
        prompts:
          - name: "custom_version"
            type: "input"
            message: "{{- if eq .latest_tag \"NO_EXISTING_TAGS\" -}}Enter initial version (must start with v){{- else -}}Enter custom version (must start with v){{- end -}}"
            default: "{{- if eq .latest_tag \"NO_EXISTING_TAGS\" -}}v0.1.0{{- else -}}v1.0.0{{- end -}}"

      - name: "Display New Version"
        command: "{{- if eq .latest_tag \"NO_EXISTING_TAGS\" -}}echo 'Initial version will be: {{ .new_version }}'{{- else -}}echo 'New version will be: {{ .new_version }}'{{- end -}}"

      - name: "Prepare Tag"
        id: "tag_prep"
        command: "echo 'Preparing tag {{ .new_version }}'"
        prompts:
          - name: "tag_message"
            type: "input"
            message: "Tag message"
            default: "{{- if eq .latest_tag \"NO_EXISTING_TAGS\" -}}Initial release {{ .new_version }}{{- else -}}Release {{ .new_version }}{{- end -}}"
          - name: "confirm_create"
            type: "confirm"
            message: "Create tag {{ .new_version }}?"
            default: "true"

      - name: "Create Tag"
        id: "create_tag"
        command: "git tag -a {{ .new_version }} -m \"{{ .tag_message }}\""
        condition: "confirm_create == true"

      - name: "Confirm Push"
        id: "confirm_push_op"
        command: "echo 'Ready to push tag {{ .new_version }}'"
        condition: "create_tag.success"
        prompts:
          - name: "confirm_push"
            type: "confirm"
            message: "Push tag {{ .new_version }} to origin?"
            default: "true"

      - name: "Push Tag"
        id: "push_tag"
        command: "git push origin {{ .new_version }}"
        condition: "create_tag.success && confirm_push == true"

      - name: "Show Result"
        command: "echo 'Successfully created{{ if eq .confirm_push true }} and pushed{{ end }} tag {{ .new_version }} to origin'"
        condition: "create_tag.success"
